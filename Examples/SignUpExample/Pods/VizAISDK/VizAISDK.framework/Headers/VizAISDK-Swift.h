// Generated by Apple Swift version 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreML;
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import AVFoundation;
@import CoreMedia;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("VizAISDK")


/// <h1>UICircularProgressRingGradientPosition</h1>
/// This is an enumeration which is used to determine the position for a
/// gradient. Used inside the <code>UICircularProgressRingLayer</code> to allow customization
/// for the gradient.
/// <h2>Author</h2>
/// Luis Padron
typedef SWIFT_ENUM(NSInteger, UICircularProgressRingGradientPosition) {
/// Gradient positioned at the top
  UICircularProgressRingGradientPositionTop = 1,
/// Gradient positioned at the bottom
  UICircularProgressRingGradientPositionBottom = 2,
/// Gradient positioned to the left
  UICircularProgressRingGradientPositionLeft = 3,
/// Gradient positioned to the right
  UICircularProgressRingGradientPositionRight = 4,
/// Gradient positioned in the top left corner
  UICircularProgressRingGradientPositionTopLeft = 5,
/// Gradient positioned in the top right corner
  UICircularProgressRingGradientPositionTopRight = 6,
/// Gradient positioned in the bottom left corner
  UICircularProgressRingGradientPositionBottomLeft = 7,
/// Gradient positioned in the bottom right corner
  UICircularProgressRingGradientPositionBottomRight = 8,
};

/// <h1>UICircularProgressRingStyle</h1>
/// This is an enumeration which is used to determine the style of the progress ring.
/// <h2>Author</h2>
/// Luis Padron
typedef SWIFT_ENUM(NSInteger, UICircularProgressRingStyle) {
/// Inner ring is inside the circle
  UICircularProgressRingStyleInside = 1,
/// Inner ring is placed ontop of the outer ring
  UICircularProgressRingStyleOntop = 2,
/// Outer ring is dashed
  UICircularProgressRingStyleDashed = 3,
/// Outer ring is dotted
  UICircularProgressRingStyleDotted = 4,
/// Inner ring is placed ontop of the outer ring and it has a gradient
  UICircularProgressRingStyleGradient = 5,
};

@class UIColor;
@class UIFont;
@class NSCoder;

/// <h1>UICiruclarProgressRingView</h1>
/// This is the UIView subclass that creates and handles everything
/// to do with the progress ring
/// This class has a custom CAShapeLayer (UICircularProgressRingLayer) which
/// handels the drawing and animating of the view
/// The properties in this class correspond with the
/// properties in UICircularProgressRingLayer.
/// When they are set in here, they are also set for the layer and drawn accordingly
/// Read the docs for what each property does and what can be customized.
/// <h2>Author</h2>
/// Luis Padron
SWIFT_CLASS("_TtC8VizAISDK26UICircularProgressRingView")
@interface UICircularProgressRingView : UIView
/// Whether or not the progress ring should be a full circle.
/// What this means is that the outer ring will always go from 0 - 360 degrees and
/// the inner ring will be calculated accordingly depending on current value.
/// <h2>Important</h2>
/// Default = true
/// When this property is true any value set for <code>endAngle</code> will be ignored.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL fullCircle;
/// The value property for the progress ring.
/// <h2>Important</h2>
/// Default = 0
/// Must be a non-negative value. If this value falls below <code>minValue</code> it will be
/// clamped and set equal to <code>minValue</code>.
/// This cannot be used to get the value while the ring is animating, to get
/// current value while animating use <code>currentValue</code>.
/// The current value of the progress ring after animating, use setProgress(value:)
/// to alter the value with the option to animate and have a completion handler.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat value;
/// The minimum value for the progress ring. ex: (0) -> 100.
/// <h2>Important</h2>
/// Default = 100
/// Must be a non-negative value, the absolute value is taken when setting this property.
/// The <code>value</code> of the progress ring must NOT fall below <code>minValue</code> if it does the <code>value</code> property is clamped
/// and will be set equal to <code>value</code>, you will receive a warning message in the console.
/// Making this value greater than
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat minValue;
/// The maximum value for the progress ring. ex: 0 -> (100)
/// <h2>Important</h2>
/// Default = 100
/// Must be a non-negative value, the absolute value is taken when setting this property.
/// Unlike the <code>minValue</code> member <code>value</code> can extend beyond <code>maxValue</code>. What happens in this case
/// is the inner ring will do an extra loop through the outer ring, this is not noticible however.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat maxValue;
/// Variable for the style of the progress ring.
/// Range: [1,5]
/// The four styles are
/// <ul>
///   <li>
///     1: Radius of the inner ring is smaller (inner ring inside outer ring)
///   </li>
///   <li>
///     2: Radius of inner ring is equal to outer ring (both at same location)
///   </li>
///   <li>
///     3: Radius of inner ring is equal to outer ring, and the outer ring is dashed
///   </li>
///   <li>
///     4: Radius of inner ring is equal to outer ring, and the outer ring is dotted
///   </li>
///   <li>
///     5: Radius of inner ring is equal to outer ring, and inner ring has gradient
///   </li>
/// </ul>
/// <h2>Important</h2>
/// THIS IS ONLY TO BE USED WITH INTERFACE BUILDER
/// The reason for this is IB has no support for enumerations as of yet
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) NSInteger ibRingStyle;
/// The start angle for the entire progress ring view.
/// Please note that Cocoa Touch uses a clockwise rotating unit circle.
/// I.e: 90 degrees is at the bottom and 270 degrees is at the top
/// <h2>Important</h2>
/// Default = 0 (degrees)
/// Values should be in degrees (they’re converted to radians internally)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat startAngle;
/// The end angle for the entire progress ring
/// Please note that Cocoa Touch uses a clockwise rotating unit circle.
/// I.e: 90 degrees is at the bottom and 270 degrees is at the top
/// <h2>Important</h2>
/// Default = 360 (degrees)
/// Values should be in degrees (they’re converted to radians internally)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat endAngle;
/// The width of the outer ring for the progres bar
/// <h2>Important</h2>
/// Default = 10.0
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat outerRingWidth;
/// The color for the outer ring
/// <h2>Important</h2>
/// Default = UIColor.gray
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull outerRingColor;
/// The style for the outer ring end cap (how it is drawn on screen)
/// Range [1,3]
/// <ul>
///   <li>
///     1: Line with a squared off end
///   </li>
///   <li>
///     2: Line with a rounded off end
///   </li>
///   <li>
///     3: Line with a square end
///   </li>
///   <li>
///     <1 & >3: Defaults to style 1
///   </li>
/// </ul>
/// <h2>Important</h2>
/// THIS IS ONLY TO BE USED WITH INTERFACE BUILDER
/// Default = 1
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) int32_t outerRingCapStyle;
/// The width of the inner ring for the progres bar
/// <h2>Important</h2>
/// Default = 5.0
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat innerRingWidth;
/// The color of the inner ring for the progres bar
/// <h2>Important</h2>
/// Default = UIColor.blue
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull innerRingColor;
/// The spacing between the outer ring and inner ring
/// <h2>Important</h2>
/// This only applies when using progressRingStyle = 1
/// Default = 1
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) CGFloat innerRingSpacing;
/// The style for the inner ring end cap (how it is drawn on screen)
/// Range [1,3]
/// <ul>
///   <li>
///     1: Line with a squared off end
///   </li>
///   <li>
///     2: Line with a rounded off end
///   </li>
///   <li>
///     3: Line with a square end
///   </li>
///   <li>
///     <1 & >3: Defaults to style 2
///   </li>
/// </ul>
/// <h2>Important</h2>
/// THIS IS ONLY TO BE USED WITH INTERFACE BUILDER
/// Default = 2
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) int32_t innerRingCapStyle;
/// A toggle for showing or hiding the value label.
/// If false the current value will not be shown.
/// <h2>Important</h2>
/// Default = true
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL shouldShowValueText;
/// The text color for the value label field
/// <h2>Important</h2>
/// Default = UIColor.black
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIColor * _Nonnull fontColor;
/// The font to be used for the progress indicator.
/// All font attributes are specified here except for font color, which is done
/// using <code>fontColor</code>.
/// <h2>Important</h2>
/// Default = UIFont.systemFont(ofSize: 18)
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, strong) UIFont * _Nonnull font;
/// The name of the value indicator the value label will
/// appened to the value
/// Example: “ GB” -> “100 GB”
/// <h2>Important</h2>
/// Default = “%”
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic, copy) NSString * _Nonnull valueIndicator;
/// A toggle for showing or hiding floating points from
/// the value in the value label
/// <h2>Important</h2>
/// Default = false (dont show)
/// To customize number of decmial places to show, assign a value to decimalPlaces.
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) BOOL showFloatingPoint;
/// The amount of decimal places to show in the value label
/// <h2>Important</h2>
/// Default = 2
/// Only used when showFloatingPoint = true
/// <h2>Author</h2>
/// Luis Padron
@property (nonatomic) NSInteger decimalPlaces;
/// Overrides the default layer with the custom UICircularProgressRingLayer class
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
/// Overriden public init to initialize the layer and view
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Overriden public init to initialize the layer and view
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Overriden because of custom layer drawing in UICircularProgressRingLayer
- (void)drawRect:(CGRect)rect;
@end












SWIFT_CLASS("_TtC8VizAISDK8VizAIApp")
@interface VizAIApp : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class AVCaptureOutput;
@class AVCaptureConnection;

@interface VizAIApp (SWIFT_EXTENSION(VizAISDK)) <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end



SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
